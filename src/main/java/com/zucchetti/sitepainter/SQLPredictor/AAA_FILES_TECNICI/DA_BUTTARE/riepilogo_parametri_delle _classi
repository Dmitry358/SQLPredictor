//////////////////////////// PREDICTORS ////////////////////////////
public abstract class MLPredictor {
    private final String predictorName;
    private final int version;
    private final String lastTrain;
}
public class SVMPredictor extends MLPredictor {
    private String SVMType     // ALL     //?? SERVE
    private String kernelType  // ALL
    private int degree         // POLYNOM,
    private double gamma       // POLYNOM, RBF
    private double coef0       // POLYNOM
    private double rho         // ALL     //? SERVE
    final private ArrayList<ArrayList<Double>> supportVectors; // ALL
    //???? FORSE IN FASE COSTRUZIONE SALVARE DENTRO ANCHE LISTA DEI NOMI CAMPI SU QUALI SI VUOLE FARE PREDIZIONE?
}
public class LRPredictor extends MLPredictor {
    private final double[] parameters;
    //???? FORSE IN FASE COSTRUZIONE SALVARE DENTRO ANCHE LISTA DEI NOMI CAMPI SU QUALI SI VUOLE FARE PREDIZIONE?
}
public class ABCPredictor extends MLPredictor {
    private final String tableName;
    //???? FORSE IN FASE COSTRUZIONE SALVARE DENTRO ANCHE LISTA DEI NOMI CAMPI SU QUALI SI VUOLE FARE PREDIZIONE?
}
//////////////////////////// PREDICTORS-END ////////////////////////////

//////////////////////////// TRAINERS ////////////////////////////
PER COSTRUIRE TRAINER SERVONO:
+ predictorName // ALL
+ SVMType       // ALL
+ kernelType    // ALL
+ degree        // POLY
+ gamma         // POLY, RBF, sigmoid
+ coef0         // POLY, sigmoid
+ ???? rho      // ALL
+ paramC        // C_SVC, eps_svr, nu_svr
+- nu          //NU_SVC, 1_CLASS,  NU_SVR (non realizzato)
	// these are for training only
	- public double cache_size; // in MB
	- public double eps;	    // stopping criteria
	- public double C;	        // for C_SVC, EPSILON_SVR and NU_SVR
	- public int nr_weight;		// for C_SVC
	- public int[] weight_label;// for C_SVC
	- public double[] weight;	// for C_SVC
	- public double nu;	        // for NU_SVC, ONE_CLASS, and NU_SVR
	- public double p;	        // for EPSILON_SVR
	- public int shrinking;	    // use the shrinking heuristics
	- public int probability;   // do probability estimates
public class SVMTrainer {
    private String predictorName = "";
    private int version = 0;
    private String lastTrain = "";
    private String SVMType = ""; //?????????????????
    private String kernelType = "";
    private int degree = 0;
    private double gamma = 0;
    private double coef0 = 0;
    private double rho = 0;
    private double paramC =0;
    //final private ArrayList<ArrayList<Double>> supportVectors;
    ----- METODI -----
    public SVMTrainer(String predictorName/*, int version, String lastTrain,*/ String svmType, String kernelType, int polDegree, double gamma, double coef0, double rho, double paramC)
    public void train(double[][] data, double[] classType)
}--------------------------------------------------------------------------------------------

public class LRTrainer {
    private String predictorName; //!!!!!final
    private int version;
    private String lastTrain;
    private double[][] transposeOfXTimesX;
    private double[][] transposeOfXTimesY;
    private double[][] identity; //!!!!!final
    private double[] parameters; //???double[][]
    ----- METODI -----
    public LRTrainer(String predictorName, int numX, int numY)
    public void train(double[][] samples)
}--------------------------------------------------------------------------------------------

public class ABCTrainer {
    private String predictorName;
    private int version = 0;
    private String lastTrain = "0000";
    //String predictionTableName;
    ----- METODI -----
    public ABCTrainer(String predictorName)
    public void train(String dataTableName, String idField, String classificationField, DataBaseConnecter dbConnecter)
}
//////////////////////////// TRAINERS-END ////////////////////////////
